[{"C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\index.js":"1","C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\App.js":"2","C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\reportWebVitals.js":"3","C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\Buttons.js":"4","C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\MyNav.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":386,"mtime":1608648833182,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":7494,"mtime":1608649426342,"results":"10","hashOfConfig":"7"},{"size":833,"mtime":1608649150491,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1fdz3o",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\index.js",[],["24","25"],"C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\App.js",[],"C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\reportWebVitals.js",[],"C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\Buttons.js",["26"],"import React from \"react\";\r\n//import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      outputLine: \"\",\r\n      resultHistory: [],\r\n    };\r\n  }\r\n\r\n  // Add number or operator to outputLine\r\n  pushInput(char) {\r\n    // Check if result history is currently being shown\r\n    if (this.state.outputLine.includes(\"Result History\")) {\r\n      this.clear();\r\n      console.log(\"test\");\r\n      return;\r\n    }\r\n\r\n    // If char is \"clear\"\r\n    if (char === \"clear\") {\r\n      this.clear();\r\n    }\r\n    // If char is \"=\"\r\n    else if (char === \"=\") {\r\n      this.calculate();\r\n    }\r\n    // If char is \"plus-minus\"\r\n    else if (char === \"plus-minus\") {\r\n      this.changeSign();\r\n    }\r\n    // If char is \"history\"\r\n    else if (char === \"history\") {\r\n      this.history();\r\n    }\r\n    // Else\r\n    else {\r\n      this.addToOutput(char);\r\n    }\r\n  }\r\n\r\n  // Add to output line\r\n  addToOutput(char) {\r\n    // Check if char is a number and the last result is still the outputLine and not equal to whole history\r\n    if (\r\n      this.state.outputLine ===\r\n        this.state.resultHistory[this.state.resultHistory.length - 1] &&\r\n      !isNaN(char)\r\n    ) {\r\n      this.clear();\r\n    }\r\n\r\n    var re = /[+\\-*/]/g;\r\n    // Check if first addition to string is an operator\r\n    if (char.match(re) && this.state.outputLine === \"\") {\r\n      return;\r\n    }\r\n    // If char is an operator and the last item in the string is an operator replace the last value\r\n    else if (\r\n      char.match(re) &&\r\n      this.state.outputLine[this.state.outputLine.length - 1].match(re)\r\n    ) {\r\n      this.setState((state) => {\r\n        return {\r\n          outputLine:\r\n            state.outputLine.slice(0, state.outputLine.length - 1) + char,\r\n        };\r\n      });\r\n    }\r\n    // Otherwise add char to the current string\r\n    else {\r\n      this.setState((state) => {\r\n        return {\r\n          outputLine: state.outputLine + char,\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  // Evalulate the outputLine string\r\n  calculate() {\r\n    var equation = this.state.outputLine;\r\n    var re = /[+\\-*/.]/g;\r\n    // If equation only includes a decimal place is an empty string\r\n    if (equation === \".\" || equation === \"\") {\r\n      return;\r\n    }\r\n    else if (equation[0] === \".\" && equation[1].match(re)) {\r\n      this.clear();\r\n      return;\r\n    }\r\n    // Check string is only contains valid characters\r\n    equation = equation.replace(/[^-()\\d/*+.]/g, \"\");\r\n\r\n    \r\n    // Remove unwanted operators and decimal places at the end of the string\r\n    while (equation[equation.length - 1].match(re)) {\r\n      equation = equation.slice(0, equation.length - 1);\r\n    }\r\n\r\n    // Check for too many decimal places in a number\r\n    re = /[+\\-*/]/g;\r\n    var nums = equation.split(re);\r\n    nums.forEach((num) => {\r\n      if (num.includes(\".\")) {\r\n        var subNum = num.split(\".\");\r\n        if (subNum.length > 2) {\r\n          equation = \"\";\r\n          this.setState(() => {\r\n            return {\r\n              outputLine: \"\",\r\n            };\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check if equation is not undefined\r\n    if (equation) {\r\n      // Evalulate the string\r\n      \r\n      var answer = eval(equation);\r\n\r\n      this.setState((state) => {\r\n        return {\r\n          outputLine: String(answer),\r\n          resultHistory: state.resultHistory.concat(String(answer)),\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  // Clear the outputLine\r\n  clear() {\r\n    this.setState(() => {\r\n      return {\r\n        outputLine: \"\",\r\n      };\r\n    });\r\n  }\r\n\r\n  // Change sign if only one number is in the string\r\n  changeSign() {\r\n    var re = /[+\\-*/]/g;\r\n    var nums = this.state.outputLine.split(re);\r\n    if (nums.length === 1) {\r\n      this.setState(() => {\r\n        return {\r\n          outputLine: \"-\" + nums[0],\r\n        };\r\n      });\r\n    } else if (nums.length === 2 && nums[0] === \"\") {\r\n      this.setState(() => {\r\n        return {\r\n          outputLine: nums[1],\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  history() {\r\n    this.setState((state) => {\r\n      return {\r\n        outputLine: \"Result History: \" + state.resultHistory.join(\" | \"),\r\n      };\r\n    });\r\n  }\r\n\r\n  // Populate buttons\r\n  renderButtonBlock(rowNum) {\r\n    const buttons = [\r\n      [\r\n        [\"7\", \"seven\", \"7\", \"full-width\", \"\"],\r\n        [\"8\", \"eight\", \"8\", \"full-width\", \"\"],\r\n        [\"9\", \"nine\", \"9\", \"full-width\", \"\"],\r\n        [\"÷\", \"divide\", \"/\", \"full-width\", \"\"],\r\n      ],\r\n      [\r\n        [\"4\", \"four\", \"4\", \"full-width\", \"\"],\r\n        [\"5\", \"five\", \"5\", \"full-width\", \"\"],\r\n        [\"6\", \"six\", \"6\", \"full-width\", \"\"],\r\n        [\"x\", \"multiply\", \"*\", \"full-width\", \"\"],\r\n      ],\r\n      [\r\n        [\"1\", \"one\", \"1\", \"full-width\", \"\"],\r\n        [\"2\", \"two\", \"2\", \"full-width\", \"\"],\r\n        [\"3\", \"three\", \"3\", \"full-width\", \"\"],\r\n        [\"-\", \"minus\", \"-\", \"full-width\", \"\"],\r\n      ],\r\n      [\r\n        [\"±\", \"plus-minus\", \"plus-minus\", \"full-width\", \"\"],\r\n        [\"0\", \"zero\", \"0\", \"full-width\", \"\"],\r\n        [\".\", \"point\", \".\", \"full-width\", \"\"],\r\n        [\"+\", \"plus\", \"+\", \"full-width\", \"\"],\r\n      ],\r\n      [[\"=\", \"equals\", \"=\", \"full-width full-height\", \"2\"]],\r\n      [\r\n        [\"Clear\", \"clear\", \"clear\", \"full-width\", \"6\"],\r\n        [\"Result History\", \"history\", \"history\", \"full-width\", \"6\"],\r\n      ],\r\n    ];\r\n    var buttonBlock = [];\r\n\r\n    buttons[rowNum].forEach((button) => {\r\n      const newButton = this.createButton(\r\n        button[0],\r\n        button[1],\r\n        button[2],\r\n        button[3],\r\n        button[4]\r\n      );\r\n      buttonBlock.push(newButton);\r\n    });\r\n\r\n    return buttonBlock;\r\n  }\r\n\r\n  // Create a new button\r\n  createButton(displayValue, id, calcValue, className, colWidth) {\r\n    return (\r\n      <Col xs={colWidth}>\r\n        <Button\r\n          variant=\"info\"\r\n          id={id}\r\n          className={className}\r\n          onClick={() => this.pushInput(calcValue)}\r\n        >\r\n          <h1> {displayValue} </h1>\r\n        </Button>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br />\r\n        <Row>\r\n          <Col className=\"text-right\">\r\n            <Card>\r\n              <Card.Body id=\"results-box\">\r\n                <h1> {this.state.outputLine} </h1>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Card>\r\n          <Card.Body>\r\n            <Row className=\"justify-content-between\">\r\n              <Col xs={10}>\r\n                <Container>\r\n                  <Row>{this.renderButtonBlock(0)}</Row>\r\n                  <br />\r\n                  <Row>{this.renderButtonBlock(1)}</Row>\r\n                  <br />\r\n                  <Row>{this.renderButtonBlock(2)}</Row>\r\n                  <br />\r\n                  <Row>{this.renderButtonBlock(3)}</Row>\r\n                </Container>\r\n              </Col>\r\n              {this.renderButtonBlock(4)}\r\n            </Row>\r\n            <br />\r\n            <Row className=\"justify-content-center\">\r\n              {this.renderButtonBlock(5)}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","C:\\Users\\matth\\Documents\\Code\\The-Dev\\react-calculator\\calculator\\src\\MyNav.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":129,"column":20,"nodeType":"33","messageId":"34","endLine":129,"endColumn":24},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]