{"version":3,"sources":["Buttons.js","MyNav.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","state","outputLine","resultHistory","char","this","includes","clear","console","log","calculate","changeSign","history","addToOutput","length","isNaN","re","match","setState","slice","equation","replace","nums","split","forEach","num","answer","eval","String","concat","join","rowNum","buttonBlock","button","newButton","createButton","push","displayValue","id","calcValue","className","colWidth","xs","variant","onClick","pushInput","Body","renderButtonBlock","React","Component","MyNav","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Text","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e51b2084.chunk.js","sourcesContent":["import React from \"react\";\r\n//import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      outputLine: \"\",\r\n      resultHistory: [],\r\n    };\r\n  }\r\n\r\n  // Add number or operator to outputLine\r\n  pushInput(char) {\r\n    // Check if result history is currently being shown\r\n    if (this.state.outputLine.includes(\"Result History\")) {\r\n      this.clear();\r\n      console.log(\"test\");\r\n      return;\r\n    }\r\n\r\n    // If char is \"clear\"\r\n    if (char === \"clear\") {\r\n      this.clear();\r\n    }\r\n    // If char is \"=\"\r\n    else if (char === \"=\") {\r\n      this.calculate();\r\n    }\r\n    // If char is \"plus-minus\"\r\n    else if (char === \"plus-minus\") {\r\n      this.changeSign();\r\n    }\r\n    // If char is \"history\"\r\n    else if (char === \"history\") {\r\n      this.history();\r\n    }\r\n    // Else\r\n    else {\r\n      this.addToOutput(char);\r\n    }\r\n  }\r\n\r\n  // Add to output line\r\n  addToOutput(char) {\r\n    // Check if char is a number and the last result is still the outputLine and not equal to whole history\r\n    if (\r\n      this.state.outputLine ===\r\n        this.state.resultHistory[this.state.resultHistory.length - 1] &&\r\n      !isNaN(char)\r\n    ) {\r\n      this.clear();\r\n    }\r\n\r\n    var re = /[+\\-*/]/g;\r\n    // Check if first addition to string is an operator\r\n    if (char.match(re) && this.state.outputLine === \"\") {\r\n      return;\r\n    }\r\n    // If char is an operator and the last item in the string is an operator replace the last value\r\n    else if (\r\n      char.match(re) &&\r\n      this.state.outputLine[this.state.outputLine.length - 1].match(re)\r\n    ) {\r\n      this.setState((state) => {\r\n        return {\r\n          outputLine:\r\n            state.outputLine.slice(0, state.outputLine.length - 1) + char,\r\n        };\r\n      });\r\n    }\r\n    // Otherwise add char to the current string\r\n    else {\r\n      this.setState((state) => {\r\n        return {\r\n          outputLine: state.outputLine + char,\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  // Evalulate the outputLine string\r\n  calculate() {\r\n    var equation = this.state.outputLine;\r\n    var re = /[+\\-*/.]/g;\r\n    // If equation only includes a decimal place is an empty string\r\n    if (equation === \".\" || equation === \"\") {\r\n      return;\r\n    }\r\n    else if (equation[0] === \".\" && equation[1].match(re)) {\r\n      this.clear();\r\n      return;\r\n    }\r\n    // Check string is only contains valid characters\r\n    equation = equation.replace(/[^-()\\d/*+.]/g, \"\");\r\n\r\n    \r\n    // Remove unwanted operators and decimal places at the end of the string\r\n    while (equation[equation.length - 1].match(re)) {\r\n      equation = equation.slice(0, equation.length - 1);\r\n    }\r\n\r\n    // Check for too many decimal places in a number\r\n    re = /[+\\-*/]/g;\r\n    var nums = equation.split(re);\r\n    nums.forEach((num) => {\r\n      if (num.includes(\".\")) {\r\n        var subNum = num.split(\".\");\r\n        if (subNum.length > 2) {\r\n          equation = \"\";\r\n          this.setState(() => {\r\n            return {\r\n              outputLine: \"\",\r\n            };\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check if equation is not undefined\r\n    if (equation) {\r\n      // Evalulate the string\r\n      \r\n      var answer = eval(equation);\r\n\r\n      this.setState((state) => {\r\n        return {\r\n          outputLine: String(answer),\r\n          resultHistory: state.resultHistory.concat(String(answer)),\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  // Clear the outputLine\r\n  clear() {\r\n    this.setState(() => {\r\n      return {\r\n        outputLine: \"\",\r\n      };\r\n    });\r\n  }\r\n\r\n  // Change sign if only one number is in the string\r\n  changeSign() {\r\n    var re = /[+\\-*/]/g;\r\n    var nums = this.state.outputLine.split(re);\r\n    if (nums.length === 1) {\r\n      this.setState(() => {\r\n        return {\r\n          outputLine: \"-\" + nums[0],\r\n        };\r\n      });\r\n    } else if (nums.length === 2 && nums[0] === \"\") {\r\n      this.setState(() => {\r\n        return {\r\n          outputLine: nums[1],\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  history() {\r\n    this.setState((state) => {\r\n      return {\r\n        outputLine: \"Result History: \" + state.resultHistory.join(\" | \"),\r\n      };\r\n    });\r\n  }\r\n\r\n  // Populate buttons\r\n  renderButtonBlock(rowNum) {\r\n    const buttons = [\r\n      [\r\n        [\"7\", \"seven\", \"7\", \"full-width\", \"\"],\r\n        [\"8\", \"eight\", \"8\", \"full-width\", \"\"],\r\n        [\"9\", \"nine\", \"9\", \"full-width\", \"\"],\r\n        [\"÷\", \"divide\", \"/\", \"full-width\", \"\"],\r\n      ],\r\n      [\r\n        [\"4\", \"four\", \"4\", \"full-width\", \"\"],\r\n        [\"5\", \"five\", \"5\", \"full-width\", \"\"],\r\n        [\"6\", \"six\", \"6\", \"full-width\", \"\"],\r\n        [\"x\", \"multiply\", \"*\", \"full-width\", \"\"],\r\n      ],\r\n      [\r\n        [\"1\", \"one\", \"1\", \"full-width\", \"\"],\r\n        [\"2\", \"two\", \"2\", \"full-width\", \"\"],\r\n        [\"3\", \"three\", \"3\", \"full-width\", \"\"],\r\n        [\"-\", \"minus\", \"-\", \"full-width\", \"\"],\r\n      ],\r\n      [\r\n        [\"±\", \"plus-minus\", \"plus-minus\", \"full-width\", \"\"],\r\n        [\"0\", \"zero\", \"0\", \"full-width\", \"\"],\r\n        [\".\", \"point\", \".\", \"full-width\", \"\"],\r\n        [\"+\", \"plus\", \"+\", \"full-width\", \"\"],\r\n      ],\r\n      [[\"=\", \"equals\", \"=\", \"full-width full-height\", \"2\"]],\r\n      [\r\n        [\"Clear\", \"clear\", \"clear\", \"full-width\", \"6\"],\r\n        [\"Result History\", \"history\", \"history\", \"full-width\", \"6\"],\r\n      ],\r\n    ];\r\n    var buttonBlock = [];\r\n\r\n    buttons[rowNum].forEach((button) => {\r\n      const newButton = this.createButton(\r\n        button[0],\r\n        button[1],\r\n        button[2],\r\n        button[3],\r\n        button[4]\r\n      );\r\n      buttonBlock.push(newButton);\r\n    });\r\n\r\n    return buttonBlock;\r\n  }\r\n\r\n  // Create a new button\r\n  createButton(displayValue, id, calcValue, className, colWidth) {\r\n    return (\r\n      <Col xs={colWidth}>\r\n        <Button\r\n          variant=\"info\"\r\n          id={id}\r\n          className={className}\r\n          onClick={() => this.pushInput(calcValue)}\r\n        >\r\n          <h1> {displayValue} </h1>\r\n        </Button>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br />\r\n        <Row>\r\n          <Col className=\"text-right\">\r\n            <Card>\r\n              <Card.Body id=\"results-box\">\r\n                <h1> {this.state.outputLine} </h1>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Card>\r\n          <Card.Body>\r\n            <Row className=\"justify-content-between\">\r\n              <Col xs={10}>\r\n                <Container>\r\n                  <Row>{this.renderButtonBlock(0)}</Row>\r\n                  <br />\r\n                  <Row>{this.renderButtonBlock(1)}</Row>\r\n                  <br />\r\n                  <Row>{this.renderButtonBlock(2)}</Row>\r\n                  <br />\r\n                  <Row>{this.renderButtonBlock(3)}</Row>\r\n                </Container>\r\n              </Col>\r\n              {this.renderButtonBlock(4)}\r\n            </Row>\r\n            <br />\r\n            <Row className=\"justify-content-center\">\r\n              {this.renderButtonBlock(5)}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport \"./App.css\";\r\n\r\nclass MyNav extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\r\n          <Navbar.Brand>React Calculator</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n            </Nav>\r\n            <Nav>\r\n            <Navbar.Text className=\"nav-link\">\r\n                <a href='https://www.matthewcotton.dev/#/projects'>Back to Portfolio</a>\r\n              </Navbar.Text>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyNav;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons.js\";\nimport MyNav from \"./MyNav\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <MyNav />\n        <Buttons />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}