{"version":3,"sources":["Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","state","currentSelection","resultHistory","char","this","length","isNaN","clear","re","match","setState","slice","equation","replace","nums","split","forEach","num","includes","answer","eval","String","concat","className","Body","id","xs","variant","onClick","addNumOrOp","changeSign","calculate","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0eace1e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentSelection: \"\",\r\n      resultHistory: [],\r\n    };\r\n  }\r\n\r\n  // Add number or operator to currentSelection\r\n  addNumOrOp(char) {\r\n    // Check if char is a number and the last result is still the currentSelection\r\n    if (\r\n      this.state.currentSelection ===\r\n        this.state.resultHistory[this.state.resultHistory.length - 1] &&\r\n      !isNaN(char)\r\n    ) {\r\n      this.clear();\r\n    }\r\n\r\n    // Check if first addition to string is an operator\r\n    var re = /[+\\-*/]/g;\r\n\r\n    if (char.match(re) && this.state.currentSelection === \"\") {\r\n      return;\r\n    }\r\n    // If char is an operator and the last item in the string is an operator replace the last value\r\n    else if (\r\n      char.match(re) &&\r\n      this.state.currentSelection[this.state.currentSelection.length - 1].match(\r\n        re\r\n      )\r\n    ) {\r\n      this.setState((state) => {\r\n        return {\r\n          currentSelection:\r\n            state.currentSelection.slice(0, state.currentSelection.length - 1) +\r\n            char,\r\n        };\r\n      });\r\n    }\r\n    // Otherwise add char to the current string\r\n    else {\r\n      this.setState((state) => {\r\n        return {\r\n          currentSelection: state.currentSelection + char,\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  // Evalulate the currentSelection string\r\n  calculate() {\r\n    var equation = this.state.currentSelection;\r\n\r\n    // Check string is only contains valid characters\r\n    equation = equation.replace(/[^-()\\d/*+.]/g, \"\");\r\n\r\n    var re = /[+\\-*/.]/g;\r\n\r\n    // Remove unwanted operators and decimal places at the end of the string\r\n    while (equation[equation.length - 1].match(re)) {\r\n      equation = equation.slice(0, equation.length - 1);\r\n    }\r\n\r\n    // Check for too many decimal places in a number\r\n    re = /[+\\-*/]/g;\r\n    var nums = equation.split(re);\r\n    nums.forEach((num) => {\r\n      if (num.includes(\".\")) {\r\n        var subNum = num.split(\".\");\r\n        if (subNum.length > 2) {\r\n          equation = \"\";\r\n          this.setState(() => {\r\n            return {\r\n              currentSelection: \"\",\r\n            };\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check if equation is not undefined\r\n    if (equation) {\r\n      // Evalulate the string\r\n      var answer = eval(equation);\r\n\r\n      this.setState((state) => {\r\n        return {\r\n          currentSelection: String(answer),\r\n          resultHistory: state.resultHistory.concat(String(answer)),\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  // Clear the currentSelection\r\n  clear() {\r\n    this.setState(() => {\r\n      return {\r\n        currentSelection: \"\",\r\n      };\r\n    });\r\n  }\r\n\r\n  // Change sign if only one number is in the string\r\n  changeSign() {\r\n    var re = /[+\\-*/]/g;\r\n    var nums = this.state.currentSelection.split(re);\r\n    if (nums.length === 1) {\r\n      this.setState(() => {\r\n        return {\r\n          currentSelection: \"-\" + nums[0],\r\n        };\r\n      });\r\n    } else if (nums.length === 2 && nums[0] === \"\") {\r\n      this.setState(() => {\r\n        return {\r\n          currentSelection: nums[1],\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br />\r\n        <Row>\r\n          <Col className=\"text-right\">\r\n            <Card>\r\n              <Card.Body id=\"results-box\">\r\n                <h1> {this.state.currentSelection} </h1>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Card>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col xs={10}>\r\n                <Container>\r\n                  <Row>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"seven\"\r\n                        onClick={() => this.addNumOrOp(\"7\")}\r\n                      >\r\n                        <h1>7</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"eight\"\r\n                        onClick={() => this.addNumOrOp(\"8\")}\r\n                      >\r\n                        <h1>8</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"nine\"\r\n                        onClick={() => this.addNumOrOp(\"9\")}\r\n                      >\r\n                        <h1>9</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"divide\"\r\n                        onClick={() => this.addNumOrOp(\"/\")}\r\n                      >\r\n                        <h1>÷</h1>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                  <br />\r\n                  <Row>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"four\"\r\n                        onClick={() => this.addNumOrOp(\"4\")}\r\n                      >\r\n                        <h1>4</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"five\"\r\n                        onClick={() => this.addNumOrOp(\"5\")}\r\n                      >\r\n                        <h1>5</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"six\"\r\n                        onClick={() => this.addNumOrOp(\"6\")}\r\n                      >\r\n                        <h1>6</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"multiply\"\r\n                        onClick={() => this.addNumOrOp(\"*\")}\r\n                      >\r\n                        <h1>x</h1>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                  <br />\r\n                  <Row>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"one\"\r\n                        onClick={() => this.addNumOrOp(\"1\")}\r\n                      >\r\n                        <h1>1</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"two\"\r\n                        onClick={() => this.addNumOrOp(\"2\")}\r\n                      >\r\n                        <h1>2</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"three\"\r\n                        onClick={() => this.addNumOrOp(\"3\")}\r\n                      >\r\n                        <h1>3</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"minus\"\r\n                        onClick={() => this.addNumOrOp(\"-\")}\r\n                      >\r\n                        <h1>‒</h1>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                  <br />\r\n                  <Row>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"plus-minus\"\r\n                        onClick={() => this.changeSign()}\r\n                      >\r\n                        <h1>±</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"zero\"\r\n                        onClick={() => this.addNumOrOp(\"0\")}\r\n                      >\r\n                        <h1>0</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"point\"\r\n                        onClick={() => this.addNumOrOp(\".\")}\r\n                      >\r\n                        <h1>.</h1>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        id=\"plus\"\r\n                        onClick={() => this.addNumOrOp(\"+\")}\r\n                      >\r\n                        <h1>+</h1>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n              </Col>\r\n              <Col xs={2}>\r\n                <Button\r\n                  variant=\"info\"\r\n                  id=\"equals\"\r\n                  onClick={() => this.calculate()}\r\n                >\r\n                  <h1>=</h1>\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <br />\r\n            <Row className=\"justify-content-center\">\r\n              <Button\r\n                variant=\"info\"\r\n                id=\"\"\r\n                className=\"clear\"\r\n                onClick={() => this.clear()}\r\n              >\r\n                <h1>Clear</h1>\r\n              </Button>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//import Container from \"react-bootstrap/Container\";\n//import Col from \"react-bootstrap/Col\";\n//import Row from \"react-bootstrap/Row\";\n//import Card from \"react-bootstrap/Card\";\n//import Button from \"react-bootstrap/Button\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <>\n        <p>Test Text</p>\n        <Buttons></Buttons>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}